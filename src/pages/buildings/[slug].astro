---
import 'mapbox-gl/dist/mapbox-gl.css';

import BuildingLocationPicker from '@/src/components/BuildingLocationPicker.astro';
import SectionPlaceholder from '@/src/components/SectionPlaceholder.astro';
import {
  BuildingAttributeSection,
  BuildingRenovationSection,
  PageHeader,
  TourCard,
  ValidationErrors,
} from '@components';
import { Building, fieldPath, getBuildings, objectId } from '@content';
import { PageLayout } from '@layouts';

export async function getStaticPaths() {
  const buildingsEntries = await getBuildings();
  return buildingsEntries.map((building) => ({
    params: { slug: building.slug },
    props: { building },
  }));
}

const building = Astro.props.building as Building;

const sectionMap = {
  BuildingAttributeSection,
  BuildingRenovationSection,
};
---

<PageLayout title={building.title} bodyAnnotations={objectId(building.stackbit_id)}>
  <PageHeader
    title={building.title}
    image={building.featured_image}
    size="lg"
    annotations={{ title: fieldPath('title') }}
  />

  <div class="max-w-7xl mx-auto relative">
    {
      building.validation_errors && building.validation_errors.length > 0 && (
        <div class="max-w-4xl mx-auto px-4 my-8">
          <ValidationErrors errors={building.validation_errors} draft={building.draft} />
        </div>
      )
    }
    <div class="grid md:grid-cols-12 gap-16 py-16 px-4">
      <div class="md:col-span-7">
        {
          (building.body.html.length > 0 && (
            <div
              class="text-lg mb-12 [&>*]:mb-3 [&>*:last-child]:mb-0 [&_a]:text-primary-500 [&_a]:border-b [&_a]:border-b-primary-500 [&_a]:inline-block [&_a]:leading-4"
              set:html={building.body.html}
              {...fieldPath('markdown_content')}
            />
          )) || (
            <SectionPlaceholder
              fieldPath="markdown_content"
              content="Body Content"
              className="mb-12"
            />
          )
        }
        {
          building.sections.above_images.map(({ type, fieldPath, ...props }) => {
            const Component = sectionMap[type] as (_props: any) => any;
            return <Component {...props} className="mb-12" fieldPath={fieldPath} />;
          })
        }
        {
          (building.images && building.images.length > 0 && (
            <div class="grid sm:grid-cols-2 gap-6">
              {building.images.map((image, index) => ({
                /*<ResponsiveImage
                  src={image.gallery_item}
                  annotations={{ self: fieldPath(`images.${index}`) }}
                />*/
              }))}
            </div>
          )) || <SectionPlaceholder fieldPath="images" content="Images" className="mb-12" />
        }
        {
          building.sections.below_images.map(({ type, fieldPath, ...props }) => {
            const Component = sectionMap[type] as (_props: any) => any;
            return <Component {...props} className="mt-12" fieldPath={fieldPath} />;
          })
        }

        {
          building.tours.length > 0 && (
            <div class="max-w-4xl mt-12">
              <h2 class="font-bold mb-3 text-sm tracking-widest uppercase text-secondary-500">
                Tours
              </h2>
              <div class="grid sm:grid-cols-2 gap-6">
                {building.tours.map((tour) => (
                  <TourCard {...tour} />
                ))}
              </div>
            </div>
          )
        }
      </div>
      <div class="md:col-span-5">
        {
          building.sections.above_map.map(({ type, fieldPath, ...props }) => {
            const Component = sectionMap[type] as (_props: any) => any;
            return <Component {...props} className="mb-8" fieldPath={fieldPath} />;
          })
        }
        {
          (building.static_map && (
            <div class="mb-12 relative">
              {/*<ResponsiveImage src={building.static_map.sidebar} className="w-full border" />*/}
              {building.address && (
                <div class="absolute top-0 left-0 z-10 p-3 text-sm bg-secondary-500/20 text-black/70 rounded-br-sm">
                  {building.address}
                </div>
              )}
            </div>
          )) || <SectionPlaceholder fieldPath="static_map" content="Static Map" className="mb-12" />
        }
        {
          building.sections.below_map.map(({ type, fieldPath, ...props }) => {
            const Component = sectionMap[type] as (_props: any) => any;
            return <Component {...props} className="mb-8" fieldPath={fieldPath} />;
          })
        }
      </div>
    </div>
    {import.meta.env.EDITOR_MODE && <BuildingLocationPicker building={building} />}
  </div>
</PageLayout>
